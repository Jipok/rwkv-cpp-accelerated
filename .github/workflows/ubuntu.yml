# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: UbuntuBuild

on:
  push:
    branches: [ "main" ]
    # only when .cpp .h or .cu files changed
    paths:
      - examples/**
      - include/**
      - .github/workflows/ubuntu.yml
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  
    build:
      runs-on: ubuntu-20.04

      steps:
      - uses: actions/checkout@v3
      
      - name: install vulkan headers and vulkan sdk
        run: sudo apt install libvulkan-dev & sudo apt install vulkan-sdk
            
      - uses: Jimver/cuda-toolkit@v0.2.10
        id: cuda-toolkit
        with:
          cuda: '11.7.0'

      
      # run bash file
      - name: run bash file
        run: |
          cd examples/storygen &&
          ./build.sh

      # package ./release into a zip and upload it as an artifact
      - name: Upload Release
        uses: actions/upload-artifact@v2
        with:
          name: Cuda(Nvidia)
          path: ./examples/storygen/release

      - name: cleanup
        run: |
          cd examples/storygen/ &&
          rm ./release/storygen

      - name: build vulkan
        run: |
          cd examples/storygen &&
          ./vulkan.sh

      - name: Upload Vulkan
        uses: actions/upload-artifact@v2
        with:
          name: Vulkan(All)
          path: ./examples/storygen/release
      